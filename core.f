\ words: load                                                   code load                                                         let block = env.dataStackPopCell();                             if (block == 0) throw 'Block 0 is denied';                      env.setBlock(block);                                            returnFromCode();                                             end-code                                                                                                                        2 load  3 load 4 load 5 load 6 load 7 load 8 load 9 load 10 load 11 load 12 load 13 load 14 load 15 load 16 load 17 load 18 load 19 load                                                                                                                                                                                                                                                                                                                                                                                        \ words: exit >=                                                                                                                code exit                                                         env.returnStackPopCell();                                       returnFromCode();                                             end-code                                                                                                                        code >=                                                           let a = env.dataStackPopCell();                                 if (a > 32767) { a = a - 65536; }                               let b = env.dataStackPopCell();                                 if (b > 32767) { b = b - 65536; }                               if (b >= a) { env.dataStackPushCell(-1); }                      else        { env.dataStackPushCell(0); }                       returnFromCode();                                             end-code                                                        \ words: @ !                                                    code @                                                            let addr = env.dataStackPopCell();                              let val = env.readCell(env.memory, addr);                       env.dataStackPushCell(val);                                     returnFromCode();                                             end-code                                                                                                                        code !                                                            let addr = env.dataStackPopCell();                              let val = env.dataStackPopCell();                               env.writeCell(env.memory, addr, val);                           returnFromCode();                                             end-code                                                                                                                                                                                        \ words: c@ c!                                                  code c@                                                           let addr = env.dataStackPopCell();                              let val = env.readByte(env.memory, addr);                       env.dataStackPushCell(val);                                     returnFromCode();                                             end-code                                                                                                                        code c!                                                           let addr = env.dataStackPopCell();                              let val = env.dataStackPopCell();                               env.writeByte(env.memory, addr, val);                           returnFromCode();                                             end-code                                                                                                                                                                                        \ words: . +                                                                                                                    code .                                                            let val = env.dataStackPopCell();                               if (val > 32767) { val = val - 65536; }                         console.log(val);                                               returnFromCode();                                             end-code                                                                                                                        code +                                                            let a = env.dataStackPopCell();                                 let b = env.dataStackPopCell();                                 env.dataStackPushCell(a + b);                                   returnFromCode();                                             end-code                                                                                                                        \ words: - *                                                                                                                    code -                                                            let a = env.dataStackPopCell();                                 let b = env.dataStackPopCell();                                 env.dataStackPushCell(b - a);                                   returnFromCode();                                             end-code                                                                                                                        code *                                                            let a = env.dataStackPopCell();                                 let b = env.dataStackPopCell();                                 env.dataStackPushCell(a * b);                                   returnFromCode();                                             end-code                                                                                                                        \ words: / u.                                                                                                                   code /                                                            let a = env.dataStackPopCell(); if (a > 32767) { a -= 65536; }  let b = env.dataStackPopCell(); if (b > 32767) { b -= 65536; }  env.dataStackPushCell(Math.floor(b / a));                       returnFromCode();                                             end-code                                                                                                                        code u.                                                           let v = env.dataStackPopCell();                                 console.log(v);                                                 returnFromCode();                                             end-code                                                                                                                                                                                        \ words: >r r>                                                                                                                  code >r                                                           let next_word = env.returnStackPopCell();                       env.returnStackPushCell(env.dataStackPopCell());                env.returnStackPushCell(next_word);                             returnFromCode();                                             end-code                                                                                                                        code r>                                                           let next_word = env.returnStackPopCell();                       env.dataStackPushCell(env.returnStackPopCell());                env.returnStackPushCell(next_word);                             returnFromCode();                                             end-code                                                                                                                        \ words: r@ dup drop                                                                                                            code r@                                                           env.dataStackPushCell(env.returnStackPeekCell());               returnFromCode();                                             end-code                                                                                                                        code dup                                                          env.dataStackPushCell(env.dataStackPeekCell());                 returnFromCode();                                             end-code                                                                                                                        code drop                                                         env.dataStackPopCell(); returnFromCode();                     end-code                                                                                                                        \ words: swap =                                                                                                                 code swap                                                         let a = env.dataStackPopCell();                                 let b = env.dataStackPopCell();                                 env.dataStackPushCell(a);                                       env.dataStackPushCell(b);                                       returnFromCode();                                             end-code                                                        code =                                                            let a = env.dataStackPopCell();                                 let b = env.dataStackPopCell();                                 if (a == b) { env.dataStackPushCell(-1); }                      else { env.dataStackPushCell(0); }                              returnFromCode();                                             end-code                                                        \ words: : not                                                                                                                  code :                                                            let name = env.readWord();                                      if (name.trim() == '') throw 'Empty string for name';           console.log('new colon definition', name);                      env.memory[0] = 1;                                              env.memory[2] = 1;                                              env.entry(name);                                                returnFromCode();                                             end-code                                                                                                                        code not                                                          env.dataStackPushCell(~env.dataStackPopCell());                 returnFromCode();                                             end-code                                                        \ words: immediate ;                                                                                                            code immediate                                                    w = env.vocabularies[0].word;                                   env.memory[w] = 1;                                              returnFromCode();                                             end-code                                                                                                                        code ;                                                            let word = env.code_pointer_addr(env.find_word('exit'));        env.writeNextCell(env.memory, 2);                               env.writeNextCell(env.memory, word);                            env.memory[0] = 0; env.memory[2] = 0;                           returnFromCode();                                             end-code immediate                                                                                                              \ words: , c,                                                                                                                   code ,                                                            let v = env.dataStackPopCell();                                 env.writeNextCell(env.memory, v);                               returnFromCode();                                             end-code                                                                                                                        code c,                                                           let v = env.dataStackPopCell();                                 env.writeNextByte(env.memory, v);                               returnFromCode();                                             end-code                                                                                                                        : 0=   0 =  ;                                                                                                                   \ words: here, does>                                                                                                            code here                                                          env.dataStackPushCell(env.memory.length);                       returnFromCode();                                            end-code                                                                                                                        code does>                                                        code_pointer = env.returnStackPopCell();                        w = env.vocabularies[0].word;                                   pf = env.code_pointer_addr(w);                                  env.writeCell(env.memory, pf + 6, code_pointer);                returnFromCode();                                             end-code                                                                                                                        : nop ;                                                         \ words: create                                                                                                                 code create                                                       let name = env.readWord();                                      if (name.trim() == '') { throw 'Empty string for name'; }       nop_code_addr = env.code_pointer_addr(env.find_word('nop'));    exit_code_addr = env.code_pointer_addr(env.find_word('exit'));  env.entry(name);                                                env.writeNextCell(env.memory, 3);                               env.writeNextCell(env.memory, env.memory.length + 10);          env.writeNextCell(env.memory, 2);                               env.writeNextCell(env.memory, nop_code_addr);                   env.writeNextCell(env.memory, 2);                               env.writeNextCell(env.memory, exit_code_addr);                  returnFromCode();                                             end-code                                                        \ words: variable constant ' execute                                                                                            : variable   create  0 ,  does>  ;                              : constant   create  ,  does>  @  ;                                                                                             code '                                                            let word = env.readWord();                                      if (word.trim() == '') { throw 'Empty string for word'; }       let w = env.find_word(word);                                    if (w == undefined) throw 'Word is not found '  + word;         env.dataStackPushCell(env.code_pointer_addr(w));                returnFromCode();                                             end-code                                                                                                                        : execute   >r  ;                                                                                                               \ words: compile >mark >resolve ?branch branch                                                                                  : branch   r> 2 + @ >r ;                                        : compile   2 here !  r>  dup 2 + @  here !  4 + >r  ;          : >mark   2 here !  here  0 here !  ;                           : >resolve   here swap !  ;                                                                                                     code ?branch                                                      f = env.dataStackPopCell();                                     let addr = env.returnStackPopCell();                            if (f == 0) { addr = env.readCell(env.memory, addr + 2); }      else { addr = addr + 4; }                                       env.returnStackPushCell(addr);                                  returnFromCode();                                             end-code                                                                                                                        \ words: if then else <mark <resolve do +loop                                                                                   : if   compile ?branch >mark ; immediate                        : then   >resolve  ; immediate                                  : else   compile branch >mark swap >resolve ; immediate                                                                         : <mark   here  ;                                               : <resolve  2 here !  here !  ;                                                                                                 : do   compile >r  compile >r  <mark  ; immediate                                                                               variable (do)-w1  variable (do)-w2                              : (+loop)   r> swap  r> (do)-w1 !  dup r> + (do)-w2 !              (do)-w1 @ (do)-w2 @  - swap /  0=  dup not                      if (do)-w2 @ >r  (do)-w1 @ >r then swap >r ;                 : +loop   compile (+loop) compile ?branch <resolve  ; immediate \ words: literal loop i j                                                                                                       : literal   3 here !  here !  ; immediate                       : loop   3 here !  1 here ! compile (+loop) compile ?branch         <resolve  ; immediate                                       : i   r> r> r> dup >r swap >r swap >r